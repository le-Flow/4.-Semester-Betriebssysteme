#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
#include <unistd.h>

#include "ServerClientMsg.h"

void setSigKillAction();
void event_receive_sigkill();

int qid;

int main(void) {
    msg message;

    long pids[100];
    int currentIndex = 0;

    printf("Server startet ...\n");
    qid = setupQueue();
    printf("Die Queue mit der QID %d wurde eingerichtet.\nServer wartet auf Clients...\n\n", qid);
    if (qid >= 0) {
        setSigKillAction();

        while (1) {
            if (msgrcv(qid, &message, sizeof(msg_content), SERVER_TYPE, 0) > 0) {
                msg_content content = message.content;

                pids[currentIndex] = content.pid_sender;
                msg_content firstReturn;
                firstReturn.pid_sender = getpid();
                strcpy(firstReturn.text, "Willkommen!");
                sendMessage(pids[currentIndex], firstReturn);

                printf("Prozess %i hat sich angemeldet\n", content.pid_sender);

                for (int i = 0; i < currentIndex; i++) {
                    printf("Gebe %ld bescheid...\n", pids[i]);
                    msg_content broadcast;
                    broadcast.pid_sender = getpid();
                    sprintf(broadcast.text, "Prozess %i ist jetzt auch dabei.", content.pid_sender);
                    sendMessage(pids[i], broadcast);
                }
                currentIndex++;
            } else {
                printf("Fehler beim Empfangen einer Nachricht von einem Client\n");
            }
        }
    }

    return (EXIT_SUCCESS);
}

void setSigKillAction() {
    struct sigaction receiverSIGINT = {0};
    struct sigaction receiverSIGKILL = {0};
    receiverSIGINT.sa_handler = event_receive_sigkill;
    receiverSIGKILL.sa_handler = event_receive_sigkill;
    sigaction(SIGINT, &receiverSIGINT, 0);
    sigaction(SIGKILL, &receiverSIGKILL, 0);
}

void event_receive_sigkill() {
    printf("LÃ¶sche Message Queue mit der QID %d.\n", qid);
    msgctl(qid, IPC_RMID, NULL);
    exit(0);
}
ct inssta
